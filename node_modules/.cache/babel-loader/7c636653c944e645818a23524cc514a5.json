{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rohit\\\\Desktop\\\\intern\\\\Sushmita - Final3\\\\frontend\\\\src\\\\components\\\\CheckoutForm\\\\PaymentForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Typography, Button, Divider, List, ListItem, ListItemText } from '@material-ui/core'; //import { Elements, CardElement, ElementsConsumer } from '@stripe/react-stripe-js';\n//import { loadStripe } from '@stripe/stripe-js';\n\nimport Review from './Review'; //const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction loadScript(src) {\n  return new Promise(resolve => {\n    const script = document.createElement('script');\n    script.src = src;\n\n    script.onload = () => {\n      resolve(true);\n    };\n\n    script.onerror = () => {\n      resolve(false);\n    };\n\n    document.body.appendChild(script);\n  });\n}\n\nconst __DEV__ = document.domain === 'localhost';\n\nconst PaymentForm = ({\n  backStep,\n  next\n}) => {\n  _s();\n\n  const [name, setName] = useState('Meghana');\n\n  async function displayRazorPay() {\n    const res = await loadScript('https://checkout.razorpay.com/v1/checkout.js');\n\n    if (!res) {\n      alert('Razorpay SDK failed to load. Are you connected to Internet?');\n      return;\n    }\n\n    const data = await fetch('http://localhost:5000/razorpay', {\n      method: 'POST'\n    }).then(t => t.json());\n    console.log(data);\n    const options = {\n      \"key\": __DEV__ ? 'rzp_test_8mtVT1x94JsEtr' : 'PRODUCTION_KEY',\n      // Enter the Key ID generated from the Dashboard\n      \"amount\": data.amount.toString(),\n      // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise\n      \"currency\": data.currency,\n      \"name\": \"Silicon14\",\n      \"description\": \"Thank you for making your payment\",\n      \"image\": \"http://localhost:5000/symbol.png\",\n      \"order_id\": data.id,\n      //This is a sample Order ID. Pass the `id` obtained in the response of Step 1\n      \"handler\": function (res) {\n        /* alert(res.razorpay_payment_id);\r\n        alert(res.razorpay_order_id);\r\n        alert(res.razorpay_signature); */\n        next();\n        /* console.log(res)\r\n        console.log(id)\r\n        axios.put(`http://localhost:3000/api/orders/${id}`, {id: res.razorpay_order_id})\r\n        .then(response => {\r\n          console.log(response)\r\n        })\r\n        .catch(error => {\r\n          console.log(error)\r\n        }) */\n        //axios.post(`http://localhost:3000/api/orders/:userId/`, {})\n      },\n      \"prefill\": {\n        name\n      }\n    };\n    const paymentObject = new window.Razorpay(options);\n    paymentObject.open();\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const orderData = {//items\n    };\n  };\n  /*  const handleSubmit = async (event, elements, stripe) => {\r\n      event.preventDefault();\r\n  \r\n      if (!stripe || !elements) return;\r\n  \r\n      const cardElement = elements.getElement(CardElement);\r\n  \r\n      const { error, paymentMethod } = await stripe.createPaymentMethod({ type: 'card', card: cardElement });\r\n  \r\n      if (error) {\r\n        console.log('[error]', error);\r\n      } else {\r\n        const orderData = {\r\n          line_items: checkoutToken.live.line_items,\r\n          customer: { firstname: shippingData.firstName, lastname: shippingData.lastName, email: shippingData.email },\r\n          shipping: { name: 'International', street: shippingData.address1, town_city: shippingData.city, county_state: shippingData.shippingSubdivision, postal_zip_code: shippingData.zip, country: shippingData.shippingCountry },\r\n          fulfillment: { shipping_method: shippingData.shippingOption },\r\n          payment: {\r\n            gateway: 'stripe',\r\n            stripe: {\r\n              payment_method_id: paymentMethod.id,\r\n            },\r\n          },\r\n        };\r\n  \r\n        onCaptureCheckout(checkoutToken.id, orderData);\r\n  \r\n        nextStep();\r\n      }\r\n    }; */\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Review, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      style: {\n        margin: '0px 0',\n        paddingTop: '10px'\n      },\n      children: \"Payment method\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: /*#__PURE__*/_jsxDEV(ListItem, {\n        children: /*#__PURE__*/_jsxDEV(ListItemText, {\n          secondary: \"RazorPay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => handleSubmit(e),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          onClick: backStep,\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: displayRazorPay,\n          children: \"Pay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PaymentForm, \"TgdochkY0bS/fI0Xplw8vgQKNMU=\");\n\n_c = PaymentForm;\nexport default PaymentForm;\n{\n  /* <Review checkoutToken={checkoutToken} />\r\n       <Divider />\r\n       <Typography variant=\"h6\" gutterBottom style={{ margin: '20px 0' }}>Payment method</Typography>\r\n       <Elements stripe={stripePromise}>\r\n         <ElementsConsumer>{({ elements, stripe }) => (\r\n           <form onSubmit={(e) => handleSubmit(e, elements, stripe)}>\r\n             <CardElement />\r\n             <br /> <br />\r\n             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n               <Button variant=\"outlined\" onClick={backStep}>Back</Button>\r\n               <Button type=\"submit\" variant=\"contained\" disabled={!stripe} color=\"primary\">\r\n                 Pay {checkoutToken.live.subtotal.formatted_with_symbol}\r\n               </Button>\r\n             </div>\r\n           </form>\r\n         )}\r\n         </ElementsConsumer>\r\n       </Elements> */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentForm\");","map":{"version":3,"sources":["C:/Users/rohit/Desktop/intern/Sushmita - Final3/frontend/src/components/CheckoutForm/PaymentForm.js"],"names":["React","useState","Typography","Button","Divider","List","ListItem","ListItemText","Review","loadScript","src","Promise","resolve","script","document","createElement","onload","onerror","body","appendChild","__DEV__","domain","PaymentForm","backStep","next","name","setName","displayRazorPay","res","alert","data","fetch","method","then","t","json","console","log","options","amount","toString","currency","id","paymentObject","window","Razorpay","open","handleSubmit","event","preventDefault","orderData","margin","paddingTop","e","display","justifyContent"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport { Typography, Button, Divider, List, ListItem, ListItemText } from '@material-ui/core';\r\n//import { Elements, CardElement, ElementsConsumer } from '@stripe/react-stripe-js';\r\n//import { loadStripe } from '@stripe/stripe-js';\r\nimport Review from './Review';\r\n\r\n//const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\r\n\r\nfunction loadScript(src) {\r\n\treturn new Promise((resolve) => {\r\n\t\tconst script = document.createElement('script')\r\n\t\tscript.src = src\r\n\t\tscript.onload = () => {\r\n\t\t\tresolve(true)\r\n\t\t}\r\n\t\tscript.onerror = () => {\r\n\t\t\tresolve(false)\r\n\t\t}\r\n\t\tdocument.body.appendChild(script)\r\n\t})\r\n}\r\n\r\nconst __DEV__ = document.domain === 'localhost'\r\n\r\n\r\nconst PaymentForm = ({backStep, next}) => {\r\n  const [name, setName] = useState('Meghana')\r\n\r\n  async function displayRazorPay(){\r\n    const res = await loadScript('https://checkout.razorpay.com/v1/checkout.js')\r\n\r\n    if (!res) {\r\n\t\t\talert('Razorpay SDK failed to load. Are you connected to Internet?')\r\n\t\t\treturn\r\n    }\r\n\r\n    const data =await fetch('http://localhost:5000/razorpay', {method: 'POST'}).then((t) =>\r\n      t.json()\r\n    )\r\n    console.log(data)\r\n    const options = {\r\n      \"key\":  __DEV__ ? 'rzp_test_8mtVT1x94JsEtr' : 'PRODUCTION_KEY', // Enter the Key ID generated from the Dashboard\r\n      \"amount\": data.amount.toString(), // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise\r\n      \"currency\": data.currency,\r\n      \"name\": \"Silicon14\",\r\n      \"description\": \"Thank you for making your payment\",\r\n      \"image\": \"http://localhost:5000/symbol.png\",\r\n      \"order_id\": data.id, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1\r\n      \"handler\": function (res){\r\n          /* alert(res.razorpay_payment_id);\r\n          alert(res.razorpay_order_id);\r\n          alert(res.razorpay_signature); */\r\n          next();\r\n          /* console.log(res)\r\n          console.log(id)\r\n        axios.put(`http://localhost:3000/api/orders/${id}`, {id: res.razorpay_order_id})\r\n          .then(response => {\r\n            console.log(response)\r\n          })\r\n          .catch(error => {\r\n            console.log(error)\r\n          }) */\r\n          //axios.post(`http://localhost:3000/api/orders/:userId/`, {})\r\n          \r\n      },\r\n      \"prefill\": {\r\n         name,\r\n      },\r\n  };\r\n  const paymentObject = new window.Razorpay(options)\r\n\t\tpaymentObject.open()\r\n  } \r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const orderData={\r\n      //items\r\n\r\n    }\r\n  }\r\n\r\n/*  const handleSubmit = async (event, elements, stripe) => {\r\n    event.preventDefault();\r\n\r\n    if (!stripe || !elements) return;\r\n\r\n    const cardElement = elements.getElement(CardElement);\r\n\r\n    const { error, paymentMethod } = await stripe.createPaymentMethod({ type: 'card', card: cardElement });\r\n\r\n    if (error) {\r\n      console.log('[error]', error);\r\n    } else {\r\n      const orderData = {\r\n        line_items: checkoutToken.live.line_items,\r\n        customer: { firstname: shippingData.firstName, lastname: shippingData.lastName, email: shippingData.email },\r\n        shipping: { name: 'International', street: shippingData.address1, town_city: shippingData.city, county_state: shippingData.shippingSubdivision, postal_zip_code: shippingData.zip, country: shippingData.shippingCountry },\r\n        fulfillment: { shipping_method: shippingData.shippingOption },\r\n        payment: {\r\n          gateway: 'stripe',\r\n          stripe: {\r\n            payment_method_id: paymentMethod.id,\r\n          },\r\n        },\r\n      };\r\n\r\n      onCaptureCheckout(checkoutToken.id, orderData);\r\n\r\n      nextStep();\r\n    }\r\n  }; */\r\n  return (\r\n    <>\r\n      <Review/>\r\n      <Divider />\r\n      <Typography variant=\"h6\" gutterBottom style={{ margin: '0px 0' ,paddingTop: '10px' }}>Payment method</Typography>\r\n      <List>\r\n      <ListItem>\r\n      <ListItemText secondary={\"RazorPay\"} />\r\n      </ListItem>\r\n      </List>\r\n      <form onSubmit={(e) => handleSubmit(e)}>\r\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n              <Button variant=\"outlined\" onClick={backStep}>Back</Button>\r\n              <Button type=\"submit\" variant=\"contained\"  color=\"primary\" onClick={displayRazorPay}>\r\n                Pay \r\n              </Button>\r\n      </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PaymentForm;\r\n\r\n\r\n{/* <Review checkoutToken={checkoutToken} />\r\n      <Divider />\r\n      <Typography variant=\"h6\" gutterBottom style={{ margin: '20px 0' }}>Payment method</Typography>\r\n      <Elements stripe={stripePromise}>\r\n        <ElementsConsumer>{({ elements, stripe }) => (\r\n          <form onSubmit={(e) => handleSubmit(e, elements, stripe)}>\r\n            <CardElement />\r\n            <br /> <br />\r\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n              <Button variant=\"outlined\" onClick={backStep}>Back</Button>\r\n              <Button type=\"submit\" variant=\"contained\" disabled={!stripe} color=\"primary\">\r\n                Pay {checkoutToken.live.subtotal.formatted_with_symbol}\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        )}\r\n        </ElementsConsumer>\r\n      </Elements> */}"]},"metadata":{},"sourceType":"module"}