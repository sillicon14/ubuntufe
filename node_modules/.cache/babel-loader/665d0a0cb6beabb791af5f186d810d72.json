{"ast":null,"code":"import Axios from \"axios\";\nimport Cookie from \"js-cookie\";\nimport us from \"../userStore\"; // It is used to set and get userId and CartId\n\nimport { AdminProvider } from \"../adminContent/adminContent\";\nimport { USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_SIGNIN_FAIL, USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS } from \"../constants/userConstants\";\nimport { useContext } from \"react\";\n\nconst signin = (email, password) => {\n  var _s = $RefreshSig$();\n\n  return _s(async dispatch => {\n    _s();\n\n    dispatch({\n      type: USER_SIGNIN_REQUEST,\n      payload: {\n        email,\n        password\n      }\n    });\n\n    try {\n      const {\n        setAdmin\n      } = useContext(AdminProvider);\n      const {\n        data\n      } = await Axios.post(\"/api/users/signin\", {\n        email,\n        password\n      });\n      console.log(\"Inside sign-in\", data);\n      setAdmin(data.isAdmin);\n      us.setUserId(data._id); //us.setCartId(data.cartId);\n      //dispatch(createCart(data._id));\n\n      dispatch({\n        type: USER_SIGNIN_SUCCESS,\n        payload: data\n      });\n      Cookie.set(\"userInfo\", JSON.stringify(data)); //token\n\n      /*var csrftokenCookie = Cookie.get('token');\r\n          console.log(\"csrftokenCookie\",csrftokenCookie);\r\n          console.log(\"token\",document.cookie);*/\n    } catch (error) {\n      //console error\n      if (error.response && error.response.data) {\n        var signMes = error.response.data.state;\n        us.setsignMes(signMes);\n        console.log(signMes);\n      }\n\n      dispatch({\n        type: USER_SIGNIN_FAIL,\n        payload: error.message\n      });\n    }\n  }, \"RJbem2ruTL8wZHxiMu1E/vg66N4=\");\n};\n\nconst register = (name, email, password, Vpassword, isAdmin) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      name,\n      email,\n      password,\n      Vpassword,\n      isAdmin\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/register\", {\n      name,\n      email,\n      password,\n      Vpassword,\n      isAdmin\n    });\n    console.log(\"Inside register \", data);\n    us.setUserId(data._id);\n    var regMes = \"Check mail for verification!!\";\n    us.setregMes(regMes);\n    var regMes1 = \"\"; //createCart(data._id);\n    //dispatch(createCart(data._id));\n\n    setTimeout(() => {\n      us.setregMes(regMes1);\n    }, 3000);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    Cookie.set(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    //console error\n    if (error.response && error.response.data) {\n      var regMes2 = error.response.data.state; //setTimeout(function(){ x.className = x.className.replace(\"show\", \"\"); }, 2000);\n      //setTimeout(function(){  us.setregMes(regMes); }, 5000);\n\n      us.setregMes(regMes2);\n      console.log(regMes2);\n    }\n\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.message\n    });\n  }\n};\n/*\r\nconst updateUser = (id,cartId) => async  (dispatch) => {\r\n    dispatch({type: USER_UPDATE_REQUEST, payload: {id,cartId}});\r\n    try{\r\n        const {data} = await Axios.put(`/api/users/${id}`,{cartId});\r\n       \r\n        dispatch({ type:USER_UPDATE_SUCCESS, payload:data});\r\n        Cookie.set('userInfo',JSON.stringify(data));\r\n    }\r\n    catch(error){\r\n        dispatch({ type:USER_UPDATE_FAIL, payload:error.message});\r\n    }\r\n}\r\n*/\n\n\nexport { signin, register };","map":{"version":3,"sources":["C:/Users/rohit/Desktop/intern/Sushmita - Final3/frontend/src/actions/userActions.js"],"names":["Axios","Cookie","us","AdminProvider","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_SIGNIN_FAIL","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","useContext","signin","email","password","dispatch","type","payload","setAdmin","data","post","console","log","isAdmin","setUserId","_id","set","JSON","stringify","error","response","signMes","state","setsignMes","message","register","name","Vpassword","regMes","setregMes","regMes1","setTimeout","regMes2"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport Cookie from \"js-cookie\";\r\nimport us from \"../userStore\"; // It is used to set and get userId and CartId\r\nimport { AdminProvider } from \"../adminContent/adminContent\";\r\nimport {\r\n  USER_REGISTER_FAIL,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_SIGNIN_FAIL,\r\n  USER_SIGNIN_REQUEST,\r\n  USER_SIGNIN_SUCCESS,\r\n} from \"../constants/userConstants\";\r\nimport { useContext } from \"react\";\r\n\r\nconst signin = (email, password) => async (dispatch) => {\r\n  dispatch({ type: USER_SIGNIN_REQUEST, payload: { email, password } });\r\n  try {\r\n    const { setAdmin } = useContext(AdminProvider);\r\n    const { data } = await Axios.post(\"/api/users/signin\", { email, password });\r\n    console.log(\"Inside sign-in\", data);\r\n    setAdmin(data.isAdmin);\r\n    us.setUserId(data._id);\r\n    //us.setCartId(data.cartId);\r\n    //dispatch(createCart(data._id));\r\n    dispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\r\n    Cookie.set(\"userInfo\", JSON.stringify(data));\r\n\r\n    //token\r\n    /*var csrftokenCookie = Cookie.get('token');\r\n        console.log(\"csrftokenCookie\",csrftokenCookie);\r\n        console.log(\"token\",document.cookie);*/\r\n  } catch (error) {\r\n    //console error\r\n    if (error.response && error.response.data) {\r\n      var signMes = error.response.data.state;\r\n      us.setsignMes(signMes);\r\n      console.log(signMes);\r\n    }\r\n    dispatch({ type: USER_SIGNIN_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nconst register =\r\n  (name, email, password, Vpassword, isAdmin) => async (dispatch) => {\r\n    dispatch({\r\n      type: USER_REGISTER_REQUEST,\r\n      payload: { name, email, password, Vpassword, isAdmin },\r\n    });\r\n    try {\r\n      const { data } = await Axios.post(\"/api/users/register\", {\r\n        name,\r\n        email,\r\n        password,\r\n        Vpassword,\r\n        isAdmin,\r\n      });\r\n      console.log(\"Inside register \", data);\r\n      us.setUserId(data._id);\r\n      var regMes = \"Check mail for verification!!\";\r\n      us.setregMes(regMes);\r\n      var regMes1 = \"\";\r\n      //createCart(data._id);\r\n      //dispatch(createCart(data._id));\r\n      setTimeout(() => {\r\n        us.setregMes(regMes1);\r\n      }, 3000);\r\n\r\n      dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n\r\n      Cookie.set(\"userInfo\", JSON.stringify(data));\r\n    } catch (error) {\r\n      //console error\r\n      if (error.response && error.response.data) {\r\n        var regMes2 = error.response.data.state;\r\n        //setTimeout(function(){ x.className = x.className.replace(\"show\", \"\"); }, 2000);\r\n        //setTimeout(function(){  us.setregMes(regMes); }, 5000);\r\n        us.setregMes(regMes2);\r\n\r\n        console.log(regMes2);\r\n      }\r\n      dispatch({ type: USER_REGISTER_FAIL, payload: error.message });\r\n    }\r\n  };\r\n\r\n/*\r\nconst updateUser = (id,cartId) => async  (dispatch) => {\r\n    dispatch({type: USER_UPDATE_REQUEST, payload: {id,cartId}});\r\n    try{\r\n        const {data} = await Axios.put(`/api/users/${id}`,{cartId});\r\n       \r\n        dispatch({ type:USER_UPDATE_SUCCESS, payload:data});\r\n        Cookie.set('userInfo',JSON.stringify(data));\r\n    }\r\n    catch(error){\r\n        dispatch({ type:USER_UPDATE_FAIL, payload:error.message});\r\n    }\r\n}\r\n*/\r\n\r\nexport { signin, register };\r\n"]},"metadata":{},"sourceType":"module"}