{"ast":null,"code":"import { CART_ADD_ITEM, CART_REMOVE_ITEM, SET_CART_ITEMS, CART_UPDATE_ITEM } from \"../constants/cartConstants\"; //Reducers are functions that take the current state and an action as arguments, and return a new state result. \n\nfunction cartReducer(state = {\n  cartItems: [],\n  isCartItemsLOaded: false\n}, action) {\n  switch (action.type) {\n    case CART_ADD_ITEM:\n      const item = action.payload;\n      const product = state.cartItems.find(x => x.product === item.product);\n\n      if (product) {\n        return {\n          cartItems: state.cartItems.map(x => x.product === product.product ? item : x)\n        };\n      }\n\n      return {\n        cartItems: [...state.cartItems, item],\n        isCartItemsLOaded: state.isCartItemsLOaded\n      };\n\n    case CART_REMOVE_ITEM:\n      return {\n        cartItems: state.cartItems.filter(x => x._id !== action.payload),\n        isCartItemsLOaded: state.isCartItemsLOaded\n      };\n\n    case SET_CART_ITEMS:\n      return {\n        cartItems: action.payload,\n        isCartItemsLOaded: true\n      };\n\n    case CART_UPDATE_ITEM:\n      const itemu = action.payload;\n      const productu = state.cartItems.find(x => x.productu === itemu.productu);\n\n      if (productu) {\n        return {\n          cartItems: state.cartItems.map(x => x.productu === productu.productu ? itemu : x)\n        };\n      }\n\n      return {\n        cartItems: [...state.cartItems, itemu],\n        isCartItemsLOaded: state.isCartItemsLOaded\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport { cartReducer };","map":{"version":3,"sources":["C:/Users/rohit/Desktop/intern/Sushmita - Final3/frontend/src/reducers/cartReducers.js"],"names":["CART_ADD_ITEM","CART_REMOVE_ITEM","SET_CART_ITEMS","CART_UPDATE_ITEM","cartReducer","state","cartItems","isCartItemsLOaded","action","type","item","payload","product","find","x","map","filter","_id","itemu","productu"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,gBAAxB,EAAyCC,cAAzC,EAAwDC,gBAAxD,QAAgF,4BAAhF,C,CAEA;;AACA,SAASC,WAAT,CAAqBC,KAAK,GAAG;AAAEC,EAAAA,SAAS,EAAE,EAAb;AAAgBC,EAAAA,iBAAiB,EAAG;AAApC,CAA7B,EAA0EC,MAA1E,EAAiF;AAC7E,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,aAAL;AACI,YAAMU,IAAI,GAAGF,MAAM,CAACG,OAApB;AACA,YAAMC,OAAO,GAAGP,KAAK,CAACC,SAAN,CAAgBO,IAAhB,CAAqBC,CAAC,IAAIA,CAAC,CAACF,OAAF,KAAcF,IAAI,CAACE,OAA7C,CAAhB;;AAEA,UAAGA,OAAH,EAAW;AACP,eAAO;AAAEN,UAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBS,GAAhB,CAAoBD,CAAC,IAAIA,CAAC,CAACF,OAAF,KAAcA,OAAO,CAACA,OAAtB,GAAgCF,IAAhC,GAAsCI,CAA/D;AAAb,SAAP;AAEH;;AACD,aAAO;AAAER,QAAAA,SAAS,EAAE,CAAC,GAAGD,KAAK,CAACC,SAAV,EAAqBI,IAArB,CAAb;AAAyCH,QAAAA,iBAAiB,EAAGF,KAAK,CAACE;AAAnE,OAAP;;AACJ,SAAKN,gBAAL;AACI,aAAO;AAAEK,QAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBU,MAAhB,CAAuBF,CAAC,IAAEA,CAAC,CAACG,GAAF,KAAUT,MAAM,CAACG,OAA3C,CAAb;AAAkEJ,QAAAA,iBAAiB,EAAGF,KAAK,CAACE;AAA5F,OAAP;;AACJ,SAAKL,cAAL;AACI,aAAO;AAACI,QAAAA,SAAS,EAAEE,MAAM,CAACG,OAAnB;AAA4BJ,QAAAA,iBAAiB,EAAG;AAAhD,OAAP;;AAEJ,SAAKJ,gBAAL;AACI,YAAMe,KAAK,GAAGV,MAAM,CAACG,OAArB;AACA,YAAMQ,QAAQ,GAAGd,KAAK,CAACC,SAAN,CAAgBO,IAAhB,CAAqBC,CAAC,IAAIA,CAAC,CAACK,QAAF,KAAeD,KAAK,CAACC,QAA/C,CAAjB;;AAEA,UAAGA,QAAH,EAAY;AACR,eAAO;AAAEb,UAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBS,GAAhB,CAAoBD,CAAC,IAAIA,CAAC,CAACK,QAAF,KAAeA,QAAQ,CAACA,QAAxB,GAAmCD,KAAnC,GAA0CJ,CAAnE;AAAb,SAAP;AAEH;;AACD,aAAO;AAAER,QAAAA,SAAS,EAAE,CAAC,GAAGD,KAAK,CAACC,SAAV,EAAqBY,KAArB,CAAb;AAA0CX,QAAAA,iBAAiB,EAAGF,KAAK,CAACE;AAApE,OAAP;;AAEJ;AACI,aAAOF,KAAP;AA1BR;AA4BH;;AAED,SAAQD,WAAR","sourcesContent":["import { CART_ADD_ITEM, CART_REMOVE_ITEM,SET_CART_ITEMS,CART_UPDATE_ITEM } from \"../constants/cartConstants\";\r\n\r\n//Reducers are functions that take the current state and an action as arguments, and return a new state result. \r\nfunction cartReducer(state = { cartItems: [],isCartItemsLOaded : false }, action){\r\n    switch(action.type){\r\n        case CART_ADD_ITEM:\r\n            const item = action.payload;\r\n            const product = state.cartItems.find(x => x.product === item.product);\r\n\r\n            if(product){\r\n                return { cartItems: state.cartItems.map(x => x.product === product.product ? item: x)};\r\n                \r\n            }\r\n            return { cartItems: [...state.cartItems, item] ,isCartItemsLOaded : state.isCartItemsLOaded};\r\n        case CART_REMOVE_ITEM:\r\n            return { cartItems: state.cartItems.filter(x=>x._id !== action.payload) ,isCartItemsLOaded : state.isCartItemsLOaded }  \r\n        case SET_CART_ITEMS:\r\n            return {cartItems: action.payload ,isCartItemsLOaded : true}\r\n\r\n        case CART_UPDATE_ITEM:\r\n            const itemu = action.payload;\r\n            const productu = state.cartItems.find(x => x.productu === itemu.productu);\r\n\r\n            if(productu){\r\n                return { cartItems: state.cartItems.map(x => x.productu === productu.productu ? itemu: x)};\r\n                \r\n            }\r\n            return { cartItems: [...state.cartItems, itemu] ,isCartItemsLOaded : state.isCartItemsLOaded};\r\n\r\n        default:\r\n            return state\r\n    }\r\n}  \r\n\r\nexport {cartReducer} "]},"metadata":{},"sourceType":"module"}