{"ast":null,"code":"import Axios from \"axios\";\nimport Cookie from \"js-cookie\";\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, SET_CART_ITEMS, CART_UPDATE_ITEM, CART_ADD_ITEM2, CART_REMOVE_ITEM2 } from \"../constants/cartConstants\";\n\nconst addToCart = (productId, qty) => async (dispatch, getState) => {\n  const userInfo = Cookie.get('userInfo');\n\n  if (userInfo) {\n    try {\n      const {\n        data\n      } = await Axios.get(\"/api/products/\" + productId);\n      console.log(\"Data \", data);\n      const {\n        cart: {\n          cartItems\n        }\n      } = getState();\n      console.log(\"Cart Item before\", cartItems);\n      let productFound = false;\n      cartItems.map(item => {\n        if (item.product === productId) {\n          // console.log(\"Product found\", item);\n          //item.qty = parseInt(item.qty) + parseInt(qty);\n          dispatch(updateCart(item._id, parseInt(item.qty) + parseInt(qty)));\n          productFound = true;\n        }\n\n        return item;\n      });\n\n      if (productFound) {\n        return;\n      }\n\n      dispatch({\n        type: CART_ADD_ITEM,\n        payload: {\n          product: data._id,\n          name: data.name,\n          image: data.image,\n          price: data.price,\n          countInStock: data.countInStock,\n          rating: data.rating,\n          numReviews: data.numReviews,\n          qty\n        }\n      });\n      const item = [{\n        product: data._id,\n        name: data.name,\n        image: data.image,\n        price: data.price,\n        countInStock: data.countInStock,\n        rating: data.rating,\n        numReviews: data.numReviews,\n        qty\n      }];\n      const userInfo = Cookie.get('userInfo');\n\n      if (userInfo) {\n        console.log(\"User inso parse: \", JSON.parse(userInfo));\n        Axios.get(`/api/users/${JSON.parse(userInfo)._id}`).then(response => {\n          Axios.post(`/api/carts/${response.data.cartId}/addToCart`, {\n            \"cartItems\": item\n          }).then(response => {\n            console.log(\"Cart data\", response);\n          });\n        });\n      } else {\n        console.log();\n      }\n    } catch (error) {}\n  } //Cookie\n\n\n  if (!userInfo) {\n    try {\n      const {\n        data\n      } = await Axios.get(\"/api/products/\" + productId);\n      dispatch({\n        type: CART_ADD_ITEM2,\n        payload: {\n          product: data._id,\n          name: data.name,\n          image: data.image,\n          price: data.price,\n          countInStock: data.countInStock,\n          rating: data.rating,\n          numReviews: data.numReviews,\n          qty\n        }\n      });\n      const {\n        cart2: {\n          cartItems2\n        }\n      } = getState();\n      Cookie.set(\"cartItems2\", JSON.stringify(cartItems2));\n    } catch (error) {}\n  }\n};\n\nconst removeFromCart = productId => async (dispatch, getState) => {\n  const userInfo = Cookie.get('userInfo');\n\n  if (userInfo) {\n    // dispatch({ type: CART_REMOVE_ITEM, payload: productId });\n    const userInfo = Cookie.get('userInfo');\n\n    if (userInfo) {\n      console.log(\"User inso parse: \", JSON.parse(userInfo));\n      Axios.get(`/api/users/${JSON.parse(userInfo)._id}`).then(response => {\n        Axios.delete(`/api/carts/${response.data.cartId}/${productId}`).then(response => {\n          console.log(\"Romove item:\", response);\n          dispatch({\n            type: CART_REMOVE_ITEM,\n            payload: productId\n          });\n        });\n      });\n    } //Cookie.set(\"cartItems\", JSON.stringify(cartItems));\n\n  }\n\n  if (!userInfo) {\n    dispatch({\n      type: CART_REMOVE_ITEM2,\n      payload: productId\n    });\n    const {\n      cart2: {\n        cartItems2\n      }\n    } = getState();\n    Cookie.set(\"cartItems2\", JSON.stringify(cartItems2));\n  }\n};\n\nconst getCartItems = () => async (dispatch, getState) => {\n  var {\n    cart: {\n      cartItems\n    }\n  } = getState();\n  console.log(\"Inside getCartItems\", cartItems);\n  const userInfo = Cookie.get('userInfo'); // to get token \n  // const token = Cookie.get('token');\n\n  if (userInfo) {\n    console.log(\"User info parse: \", JSON.parse(userInfo));\n    Axios.get(`/api/users/${JSON.parse(userInfo)._id}`).then(response => {\n      Axios.get(`/api/carts/${response.data.cartId} `).then(response => {\n        dispatch({\n          type: SET_CART_ITEMS,\n          payload: response.data[0].cartItems\n        });\n        console.log(\"Cart items:\", response.data[0].cartItems);\n      });\n    });\n  }\n\n  console.log(\"Before set\", cartItems);\n  Cookie.set(\"cartItems\", JSON.stringify(cartItems)); // const {cookie} = Cookie.get(\"cartItems\");\n};\n\nconst updateCart = (_id, qty) => async (dispatch, getState) => {\n  var {\n    cart: {\n      cartItems\n    }\n  } = getState();\n\n  try {\n    console.log(\"Cart Item before\", cartItems);\n    let updatedCart = cartItems.map(item => {\n      if (item._id === _id) {\n        console.log(\"Product found\", item);\n        item.qty = qty;\n      }\n\n      return item;\n    });\n    console.log(\"Cart Item after\", updatedCart);\n    const userInfo = Cookie.get('userInfo');\n\n    if (userInfo) {\n      console.log(\"User inso parse: \", JSON.parse(userInfo));\n      Axios.get(`/api/users/${JSON.parse(userInfo)._id}`).then(response => {\n        Axios.put(`/api/carts/${response.data.cartId}`, {\n          \"cartItems\": updatedCart\n        }).then(response => {\n          dispatch({\n            type: SET_CART_ITEMS,\n            payload: response.data.cart.cartItems\n          });\n          console.log(\"Update data\", response.data.cart.cartItems);\n        });\n      });\n    }\n  } catch (error) {}\n};\n\nexport { addToCart, removeFromCart, getCartItems, updateCart };","map":{"version":3,"sources":["C:/Users/rohit/Desktop/intern/Sushmita - Final3/frontend/src/actions/cartActions.js"],"names":["Axios","Cookie","CART_ADD_ITEM","CART_REMOVE_ITEM","SET_CART_ITEMS","CART_UPDATE_ITEM","CART_ADD_ITEM2","CART_REMOVE_ITEM2","addToCart","productId","qty","dispatch","getState","userInfo","get","data","console","log","cart","cartItems","productFound","map","item","product","updateCart","_id","parseInt","type","payload","name","image","price","countInStock","rating","numReviews","JSON","parse","then","response","post","cartId","error","cart2","cartItems2","set","stringify","removeFromCart","delete","getCartItems","updatedCart","put"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport Cookie from \"js-cookie\";\r\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, SET_CART_ITEMS, CART_UPDATE_ITEM, CART_ADD_ITEM2, CART_REMOVE_ITEM2 } from \"../constants/cartConstants\";\r\n\r\nconst addToCart = (productId, qty) => async (dispatch, getState) => {\r\n    const userInfo = Cookie.get('userInfo');\r\n    if (userInfo) {\r\n        try {\r\n            const { data } = await Axios.get(\"/api/products/\" + productId);\r\n            console.log(\"Data \", data);\r\n            const { cart: { cartItems } } = getState();\r\n\r\n            console.log(\"Cart Item before\", cartItems);\r\n           let productFound = false;\r\n                cartItems.map(item => {\r\n                    if (item.product === productId) {\r\n                       // console.log(\"Product found\", item);\r\n                       //item.qty = parseInt(item.qty) + parseInt(qty);\r\n                       dispatch(updateCart(item._id,parseInt(item.qty) + parseInt(qty)));\r\n                       productFound = true;\r\n                    }\r\n                    return item;\r\n                }\r\n                )\r\n           if(productFound){\r\n               return;\r\n           }\r\n\r\n            dispatch({\r\n                type: CART_ADD_ITEM, payload: {\r\n                    product: data._id,\r\n                    name: data.name,\r\n                    image: data.image,\r\n                    price: data.price,\r\n                    countInStock: data.countInStock,\r\n                    rating: data.rating,\r\n                    numReviews: data.numReviews,\r\n                    qty\r\n                }\r\n            });\r\n            const item = [{\r\n                product: data._id,\r\n                name: data.name,\r\n                image: data.image,\r\n                price: data.price,\r\n                countInStock: data.countInStock,\r\n                rating: data.rating,\r\n                numReviews: data.numReviews,\r\n                qty\r\n            }]\r\n            const userInfo = Cookie.get('userInfo');\r\n            if (userInfo) {\r\n                console.log(\"User inso parse: \", JSON.parse(userInfo));\r\n                Axios.get(`/api/users/${JSON.parse(userInfo)._id}`).then(response => {\r\n                    Axios.post(`/api/carts/${response.data.cartId}/addToCart`, { \"cartItems\": item }).then(response => {\r\n                        console.log(\"Cart data\", response);\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                console.log();\r\n            }\r\n        }\r\n        catch (error) {\r\n        }\r\n    }\r\n    //Cookie\r\n    if (!userInfo) {\r\n\r\n        try {\r\n            const { data } = await Axios.get(\"/api/products/\" + productId);\r\n            dispatch({\r\n                type: CART_ADD_ITEM2, payload: {\r\n                    product: data._id,\r\n                    name: data.name,\r\n                    image: data.image,\r\n                    price: data.price,\r\n                    countInStock: data.countInStock,\r\n                    rating: data.rating,\r\n                    numReviews: data.numReviews,\r\n                    qty\r\n                }\r\n            });\r\n\r\n            const { cart2: { cartItems2 } } = getState();\r\n            Cookie.set(\"cartItems2\", JSON.stringify(cartItems2));\r\n\r\n        }\r\n        catch (error) {\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst removeFromCart = (productId) => async (dispatch, getState) => {\r\n    const userInfo = Cookie.get('userInfo');\r\n    if (userInfo) {\r\n       // dispatch({ type: CART_REMOVE_ITEM, payload: productId });\r\n\r\n\r\n        const userInfo = Cookie.get('userInfo');\r\n        if (userInfo) {\r\n            console.log(\"User inso parse: \", JSON.parse(userInfo));\r\n            Axios.get(`/api/users/${JSON.parse(userInfo)._id}`).then(response => {\r\n\r\n                Axios.delete(`/api/carts/${response.data.cartId}/${productId}`).then(response => {\r\n                    console.log(\"Romove item:\", response);\r\n                    dispatch({ type: CART_REMOVE_ITEM, payload: productId });\r\n                });\r\n            });\r\n        }\r\n        //Cookie.set(\"cartItems\", JSON.stringify(cartItems));\r\n    }\r\n    if (!userInfo) {\r\n        dispatch({ type: CART_REMOVE_ITEM2, payload: productId });\r\n\r\n        const { cart2: { cartItems2 } } = getState();\r\n        Cookie.set(\"cartItems2\", JSON.stringify(cartItems2));\r\n    }\r\n\r\n}\r\n\r\nconst getCartItems = () => async (dispatch, getState) => {\r\n\r\n\r\n    var { cart: { cartItems } } = getState();\r\n    console.log(\"Inside getCartItems\", cartItems);\r\n    const userInfo = Cookie.get('userInfo');\r\n    // to get token \r\n    // const token = Cookie.get('token');\r\n\r\n    if (userInfo) {\r\n        console.log(\"User info parse: \", JSON.parse(userInfo));\r\n        Axios.get(`/api/users/${JSON.parse(userInfo)._id}`).then(response => {\r\n\r\n            Axios.get(`/api/carts/${response.data.cartId} `).then(response => {\r\n                dispatch({ type: SET_CART_ITEMS, payload: response.data[0].cartItems });\r\n\r\n                console.log(\"Cart items:\", response.data[0].cartItems);\r\n            });\r\n        });\r\n    }\r\n\r\n    console.log(\"Before set\", cartItems);\r\n    Cookie.set(\"cartItems\", JSON.stringify(cartItems));\r\n    // const {cookie} = Cookie.get(\"cartItems\");\r\n}\r\n\r\nconst updateCart = (_id, qty) => async (dispatch, getState) => {\r\n    var { cart: { cartItems } } = getState();\r\n    try {\r\n        console.log(\"Cart Item before\", cartItems);\r\n        let updatedCart =\r\n            cartItems.map(item => {\r\n                if (item._id === _id) {\r\n                    console.log(\"Product found\", item);\r\n                    item.qty = qty;\r\n                }\r\n                return item;\r\n            }\r\n            )\r\n        console.log(\"Cart Item after\", updatedCart);\r\n        const userInfo = Cookie.get('userInfo');\r\n        if (userInfo) {\r\n            console.log(\"User inso parse: \", JSON.parse(userInfo));\r\n            Axios.get(`/api/users/${JSON.parse(userInfo)._id}`).then(response => {\r\n                Axios.put(`/api/carts/${response.data.cartId}`, { \"cartItems\": updatedCart }).then(response => {\r\n                    dispatch({ type: SET_CART_ITEMS, payload: response.data.cart.cartItems });\r\n                    console.log(\"Update data\", response.data.cart.cartItems);\r\n                });\r\n            });\r\n        }\r\n\r\n    }\r\n    catch (error) {\r\n    }\r\n}\r\n\r\nexport { addToCart, removeFromCart, getCartItems, updateCart }"]},"metadata":{},"sourceType":"module"}