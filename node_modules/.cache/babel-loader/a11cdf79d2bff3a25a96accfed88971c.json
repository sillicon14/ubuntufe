{"ast":null,"code":"import Axios from \"axios\";\nimport Cookie from \"js-cookie\";\nimport us from \"../userStore\"; // It is used to set and get userId and CartId\n\nimport { AdminProvider } from \"../adminContent/adminContent\";\nimport { USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_SIGNIN_FAIL, USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS } from \"../constants/userConstants\";\n\nconst signin = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: {\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/signin\", {\n      email,\n      password\n    });\n    console.log(\"Inside sign-in\", data); //us.setCartId(data.cartId);\n    //dispatch(createCart(data._id));\n\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    });\n    Cookie.set(\"userInfo\", JSON.stringify(data)); //token\n\n    /*var csrftokenCookie = Cookie.get('token');\r\n        console.log(\"csrftokenCookie\",csrftokenCookie);\r\n        console.log(\"token\",document.cookie);*/\n  } catch (error) {\n    //console error\n    if (error.response && error.response.data) {\n      var signMes = error.response.data.state;\n      us.setsignMes(signMes);\n      console.log(signMes);\n    }\n\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst register = (name, email, password, Vpassword, isAdmin) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      name,\n      email,\n      password,\n      Vpassword,\n      isAdmin\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/register\", {\n      name,\n      email,\n      password,\n      Vpassword,\n      isAdmin\n    });\n    console.log(\"Inside register \", data);\n    us.setUserId(data._id);\n    var regMes = \"Check mail for verification!!\";\n    us.setregMes(regMes);\n    var regMes1 = \"\"; //createCart(data._id);\n    //dispatch(createCart(data._id));\n\n    setTimeout(() => {\n      us.setregMes(regMes1);\n    }, 3000);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    Cookie.set(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    //console error\n    if (error.response && error.response.data) {\n      var regMes2 = error.response.data.state; //setTimeout(function(){ x.className = x.className.replace(\"show\", \"\"); }, 2000);\n      //setTimeout(function(){  us.setregMes(regMes); }, 5000);\n\n      us.setregMes(regMes2);\n      console.log(regMes2);\n    }\n\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.message\n    });\n  }\n};\n/*\r\nconst updateUser = (id,cartId) => async  (dispatch) => {\r\n    dispatch({type: USER_UPDATE_REQUEST, payload: {id,cartId}});\r\n    try{\r\n        const {data} = await Axios.put(`/api/users/${id}`,{cartId});\r\n       \r\n        dispatch({ type:USER_UPDATE_SUCCESS, payload:data});\r\n        Cookie.set('userInfo',JSON.stringify(data));\r\n    }\r\n    catch(error){\r\n        dispatch({ type:USER_UPDATE_FAIL, payload:error.message});\r\n    }\r\n}\r\n*/\n\n\nexport { signin, register };","map":{"version":3,"sources":["C:/Users/rohit/Desktop/intern/Sushmita - Final3/frontend/src/actions/userActions.js"],"names":["Axios","Cookie","us","AdminProvider","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_SIGNIN_FAIL","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","signin","email","password","dispatch","type","payload","data","post","console","log","set","JSON","stringify","error","response","signMes","state","setsignMes","message","register","name","Vpassword","isAdmin","setUserId","_id","regMes","setregMes","regMes1","setTimeout","regMes2"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport Cookie from \"js-cookie\";\r\nimport us from \"../userStore\"; // It is used to set and get userId and CartId\r\nimport { AdminProvider } from \"../adminContent/adminContent\";\r\nimport {\r\n  USER_REGISTER_FAIL,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_SIGNIN_FAIL,\r\n  USER_SIGNIN_REQUEST,\r\n  USER_SIGNIN_SUCCESS,\r\n} from \"../constants/userConstants\";\r\n\r\nconst signin = (email, password) => async (dispatch) => {\r\n  dispatch({ type: USER_SIGNIN_REQUEST, payload: { email, password } });\r\n  try {\r\n    const { data } = await Axios.post(\"/api/users/signin\", { email, password });\r\n    console.log(\"Inside sign-in\", data);\r\n    //us.setCartId(data.cartId);\r\n    //dispatch(createCart(data._id));\r\n    dispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\r\n    Cookie.set(\"userInfo\", JSON.stringify(data));\r\n\r\n    //token\r\n    /*var csrftokenCookie = Cookie.get('token');\r\n        console.log(\"csrftokenCookie\",csrftokenCookie);\r\n        console.log(\"token\",document.cookie);*/\r\n  } catch (error) {\r\n    //console error\r\n    if (error.response && error.response.data) {\r\n      var signMes = error.response.data.state;\r\n      us.setsignMes(signMes);\r\n      console.log(signMes);\r\n    }\r\n    dispatch({ type: USER_SIGNIN_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nconst register =\r\n  (name, email, password, Vpassword, isAdmin) => async (dispatch) => {\r\n    dispatch({\r\n      type: USER_REGISTER_REQUEST,\r\n      payload: { name, email, password, Vpassword, isAdmin },\r\n    });\r\n    try {\r\n      const { data } = await Axios.post(\"/api/users/register\", {\r\n        name,\r\n        email,\r\n        password,\r\n        Vpassword,\r\n        isAdmin,\r\n      });\r\n      console.log(\"Inside register \", data);\r\n      us.setUserId(data._id);\r\n      var regMes = \"Check mail for verification!!\";\r\n      us.setregMes(regMes);\r\n      var regMes1 = \"\";\r\n      //createCart(data._id);\r\n      //dispatch(createCart(data._id));\r\n      setTimeout(() => {\r\n        us.setregMes(regMes1);\r\n      }, 3000);\r\n\r\n      dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n\r\n      Cookie.set(\"userInfo\", JSON.stringify(data));\r\n    } catch (error) {\r\n      //console error\r\n      if (error.response && error.response.data) {\r\n        var regMes2 = error.response.data.state;\r\n        //setTimeout(function(){ x.className = x.className.replace(\"show\", \"\"); }, 2000);\r\n        //setTimeout(function(){  us.setregMes(regMes); }, 5000);\r\n        us.setregMes(regMes2);\r\n\r\n        console.log(regMes2);\r\n      }\r\n      dispatch({ type: USER_REGISTER_FAIL, payload: error.message });\r\n    }\r\n  };\r\n\r\n/*\r\nconst updateUser = (id,cartId) => async  (dispatch) => {\r\n    dispatch({type: USER_UPDATE_REQUEST, payload: {id,cartId}});\r\n    try{\r\n        const {data} = await Axios.put(`/api/users/${id}`,{cartId});\r\n       \r\n        dispatch({ type:USER_UPDATE_SUCCESS, payload:data});\r\n        Cookie.set('userInfo',JSON.stringify(data));\r\n    }\r\n    catch(error){\r\n        dispatch({ type:USER_UPDATE_FAIL, payload:error.message});\r\n    }\r\n}\r\n*/\r\n\r\nexport { signin, register };\r\n"]},"metadata":{},"sourceType":"module"}