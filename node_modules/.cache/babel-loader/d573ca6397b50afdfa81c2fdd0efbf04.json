{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rohit\\\\Desktop\\\\intern\\\\Sushmita - Final3\\\\frontend\\\\src\\\\screens\\\\SigninScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { signin } from '../actions/userActions';\nimport us from '../userStore';\nimport './Register.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SigninScreen(props) {\n  _s();\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const userSignin = useSelector(state => state.userSignin); //reads a value from the store state this takes the current state as an argument and returns whatever data we want from it.\n\n  const {\n    loading,\n    userInfo,\n    error\n  } = userSignin;\n  const dispatch = useDispatch();\n  /*\r\n      find()\r\n      \r\n  function find(){\r\n      axios.get(\"http://localhost:3000/api/users/\")\r\n        .then(response => {\r\n          for (var i = 0; i < response.data.length; i++) {\r\n            console.log(response.data.[i].email,{email})\r\n        }\r\n          console.log(response)\r\n          console.log(response.data.length)});\r\n    } */\n\n  /* let id = 0\r\n  axios.post(\"http://localhost:3000/api/users/signin\",{email: email , password: password}).then(response => \r\n    {\r\n      console.log(response)\r\n      id = response.data._id\r\n      //console.log(id) \r\n    }) */\n  //let obj = arr.find(o => o.name === 'string 1');\n\n  /* var i=1;\r\n  let obj = arr.find(o => o.name === 'string 1'); */\n\n  /* const options = {\r\n    \"key\":  __DEV__ ? 'rzp_test_8mtVT1x94JsEtr' : 'PRODUCTION_KEY', // Enter the Key ID generated from the Dashboard\r\n    \"amount\": data.amount.toString(), // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise\r\n    \"currency\": data.currency,\r\n    \"name\": \"Silicon14\",\r\n    \"description\": \"Thank you for making your payment\",\r\n    \"image\": \"http://localhost:5000/symbol.png\",\r\n    \"order_id\": data.id, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1\r\n    \"handler\": function (res){\r\n        alert(res.razorpay_payment_id);\r\n        alert(res.razorpay_order_id);\r\n        alert(res.razorpay_signature)  */\n\n  /* console.log(res)\r\n  console.log(id)\r\n  axios.put(`http://localhost:3000/api/orders/${id}`, {id: res.razorpay_order_id})\r\n  .then(response => {\r\n    console.log(response)\r\n  })\r\n  .catch(error => {\r\n    console.log(error)\r\n  }) */\n  //axios.post(`http://localhost:3000/api/orders/:userId/`, {})\n\n  /* },\r\n  \"prefill\": {\r\n     name,\r\n  },\r\n  };\r\n  const paymentObject = new window.Razorpay(options)\r\n  paymentObject.open()\r\n  }  */\n\n  useEffect(() => {\n    //If user signined then redirect to checkout page\n    if (userInfo) {\n      props.history.push(\"/\"); //displayRazorPay();\n      //props.history.push(\"/checkout\");\n      //redirectUser();\n    }\n\n    return () => {};\n  }, [userInfo]); //Only re-run the effect if userInfo changes\n\n  const submitHandler = e => {\n    e.preventDefault(); //Prevent a submit button from submitting a form\n\n    dispatch(signin(email, password)); //dispatch an action to trigger a state change(sign-in).\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"h3-color\",\n            children: [\"Login\", /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa\",\n              children: \"\\uF007\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 23\n          }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            name: \"email\",\n            id: \"email\",\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\",\n            name: \"password\",\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"button primary\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"New to Sillicon14?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/register\",\n            className: \"button secondary text-center\",\n            children: \"Create your Sillicon14 account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"red\"\n            },\n            children: us.getsignMes()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 10\n  }, this);\n}\n\n_s(SigninScreen, \"o1/UbLBqrqs/Uxr2pfOix+373u4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = SigninScreen;\nexport default SigninScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"SigninScreen\");","map":{"version":3,"sources":["C:/Users/rohit/Desktop/intern/Sushmita - Final3/frontend/src/screens/SigninScreen.js"],"names":["React","useEffect","useState","useContext","useDispatch","useSelector","Link","signin","us","SigninScreen","props","email","setEmail","password","setPassword","userSignin","state","loading","userInfo","error","dispatch","history","push","submitHandler","e","preventDefault","target","value","color","getsignMes"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { signin } from '../actions/userActions';\r\nimport us from '../userStore';\r\nimport './Register.css';\r\n\r\nfunction SigninScreen(props) {\r\n\r\n    const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const userSignin = useSelector(state=> state.userSignin); //reads a value from the store state this takes the current state as an argument and returns whatever data we want from it.\r\n  const {loading, userInfo, error} = userSignin;\r\n  const dispatch = useDispatch();\r\n\r\n  \r\n/*\r\n    find()\r\n    \r\nfunction find(){\r\n    axios.get(\"http://localhost:3000/api/users/\")\r\n      .then(response => {\r\n        for (var i = 0; i < response.data.length; i++) {\r\n          console.log(response.data.[i].email,{email})\r\n      }\r\n        console.log(response)\r\n        console.log(response.data.length)});\r\n  } */\r\n\r\n\r\n/* let id = 0\r\naxios.post(\"http://localhost:3000/api/users/signin\",{email: email , password: password}).then(response => \r\n  {\r\n    console.log(response)\r\n    id = response.data._id\r\n    //console.log(id) \r\n  }) */\r\n\r\n \r\n \r\n\r\n    //let obj = arr.find(o => o.name === 'string 1');\r\n\r\n    /* var i=1;\r\n    let obj = arr.find(o => o.name === 'string 1'); */\r\n\r\n\r\n    /* const options = {\r\n      \"key\":  __DEV__ ? 'rzp_test_8mtVT1x94JsEtr' : 'PRODUCTION_KEY', // Enter the Key ID generated from the Dashboard\r\n      \"amount\": data.amount.toString(), // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise\r\n      \"currency\": data.currency,\r\n      \"name\": \"Silicon14\",\r\n      \"description\": \"Thank you for making your payment\",\r\n      \"image\": \"http://localhost:5000/symbol.png\",\r\n      \"order_id\": data.id, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1\r\n      \"handler\": function (res){\r\n          alert(res.razorpay_payment_id);\r\n          alert(res.razorpay_order_id);\r\n          alert(res.razorpay_signature)  */\r\n          /* console.log(res)\r\n          console.log(id)\r\n        axios.put(`http://localhost:3000/api/orders/${id}`, {id: res.razorpay_order_id})\r\n          .then(response => {\r\n            console.log(response)\r\n          })\r\n          .catch(error => {\r\n            console.log(error)\r\n          }) */\r\n          //axios.post(`http://localhost:3000/api/orders/:userId/`, {})\r\n          \r\n      /* },\r\n      \"prefill\": {\r\n         name,\r\n      },\r\n  };\r\n  const paymentObject = new window.Razorpay(options)\r\n\t\tpaymentObject.open()\r\n  }  */\r\n\r\n\r\n  useEffect(() => {//If user signined then redirect to checkout page\r\n    if( userInfo){\r\n      props.history.push(\"/\");\r\n      //displayRazorPay();\r\n      //props.history.push(\"/checkout\");\r\n      //redirectUser();\r\n    }\r\n    return () => {};\r\n  }, [userInfo]); //Only re-run the effect if userInfo changes\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault(); //Prevent a submit button from submitting a form\r\n    dispatch(signin(email,password)); //dispatch an action to trigger a state change(sign-in).\r\n  }\r\n\r\n  return <div className=\"form\">\r\n    <form onSubmit={submitHandler} >\r\n      <ul className=\"form-container\">\r\n        <li>\r\n          <h3 className=\"h3-color\">Login<i className=\"fa\">&#xf007;</i></h3>\r\n        </li>\r\n        <li> \r\n          {loading && <div>Loading...</div>}\r\n          {error && <div>{error}</div>}\r\n        </li>\r\n\r\n        <li>\r\n          <label htmlFor=\"email\">\r\n            Email\r\n          </label>\r\n          <input type=\"email\" name=\"email\" id=\"email\" onChange={(e) => setEmail(e.target.value)}>\r\n          </input>\r\n        </li>\r\n        <li>\r\n          <label htmlFor=\"password\">Password</label>\r\n          <input type=\"password\" id=\"password\" name=\"password\" onChange={(e) => setPassword(e.target.value)}>\r\n          </input>\r\n        </li>\r\n        <li>\r\n          <button type=\"submit\" className=\"button primary\">Login</button>\r\n        </li>\r\n        <li>\r\n          New to Sillicon14?\r\n        </li>\r\n        <li>\r\n          <Link to=\"/register\" className=\"button secondary text-center\" >Create your Sillicon14 account</Link>\r\n        </li>\r\n        <li>\r\n          <p style={{color: \"red\"}}>{us.getsignMes()}</p>\r\n        </li>\r\n      </ul>\r\n    </form>\r\n  </div>\r\n}\r\nexport default SigninScreen;\r\n"]},"metadata":{},"sourceType":"module"}