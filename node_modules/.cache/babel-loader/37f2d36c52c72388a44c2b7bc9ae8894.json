{"ast":null,"code":"import Axios from \"axios\";\nimport Cookie from \"js-cookie\";\nimport us from '../userStore'; // It is used to set and get userId and CartId\n\nimport { USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_SIGNIN_FAIL, USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS } from \"../constants/userConstants\";\n\nconst signin = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: {\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/signin\", {\n      email,\n      password\n    });\n    console.log(\"Inside sign-in\", data);\n    us.setUserId(data._id); //us.setCartId(data.cartId);\n    //dispatch(createCart(data._id));\n\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data)); //token\n\n    /*var csrftokenCookie = Cookie.get('token');\r\n    console.log(\"csrftokenCookie\",csrftokenCookie);\r\n    console.log(\"token\",document.cookie);*/\n  } catch (error) {\n    //console error\n    if (error.response && error.response.data) {\n      var signMes = error.response.data.state;\n      us.setsignMes(signMes);\n      console.log(signMes);\n    }\n\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst register = (name, email, password, Vpassword, isAdmin) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      name,\n      email,\n      password,\n      Vpassword,\n      isAdmin\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/register\", {\n      name,\n      email,\n      password,\n      Vpassword,\n      isAdmin\n    });\n    console.log(\"Inside register \", data);\n    us.setUserId(data._id);\n    var regMes = \"Check mail for verification!!\";\n    us.setregMes(regMes);\n    var regMes1 = \"\"; //createCart(data._id);\n    //dispatch(createCart(data._id));\n\n    setTimeout(() => {\n      us.setregMes(regMes1);\n    }, 3000);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    //console error\n    if (error.response && error.response.data) {\n      var regMes2 = error.response.data.state; //setTimeout(function(){ x.className = x.className.replace(\"show\", \"\"); }, 2000);\n      //setTimeout(function(){  us.setregMes(regMes); }, 5000);\n\n      us.setregMes(regMes2);\n      console.log(regMes2);\n    }\n\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.message\n    });\n  }\n};\n/*\r\nconst updateUser = (id,cartId) => async  (dispatch) => {\r\n    dispatch({type: USER_UPDATE_REQUEST, payload: {id,cartId}});\r\n    try{\r\n        const {data} = await Axios.put(`/api/users/${id}`,{cartId});\r\n       \r\n        dispatch({ type:USER_UPDATE_SUCCESS, payload:data});\r\n        Cookie.set('userInfo',JSON.stringify(data));\r\n    }\r\n    catch(error){\r\n        dispatch({ type:USER_UPDATE_FAIL, payload:error.message});\r\n    }\r\n}\r\n*/\n\n\nexport { signin, register };","map":{"version":3,"sources":["C:/Users/rohit/Desktop/intern/Sushmita - Final3/frontend/src/actions/userActions.js"],"names":["Axios","Cookie","us","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_SIGNIN_FAIL","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","signin","email","password","dispatch","type","payload","data","post","console","log","setUserId","_id","set","JSON","stringify","error","response","signMes","state","setsignMes","message","register","name","Vpassword","isAdmin","regMes","setregMes","regMes1","setTimeout","regMes2"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport Cookie from \"js-cookie\";\r\nimport us from '../userStore'; // It is used to set and get userId and CartId\r\nimport { USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_SIGNIN_FAIL, USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS } from \"../constants/userConstants\";\r\n\r\nconst signin = (email,password) => async  (dispatch) => {\r\n    dispatch({type: USER_SIGNIN_REQUEST, payload: {email,password}});\r\n    try{\r\n        const {data} = await Axios.post(\"/api/users/signin\",{email,password});\r\n        console.log(\"Inside sign-in\",data);\r\n        us.setUserId(data._id);\r\n        //us.setCartId(data.cartId);\r\n        //dispatch(createCart(data._id));\r\n        dispatch({ type:USER_SIGNIN_SUCCESS, payload:data});\r\n        Cookie.set('userInfo',JSON.stringify(data));\r\n        \r\n        //token\r\n        /*var csrftokenCookie = Cookie.get('token');\r\n        console.log(\"csrftokenCookie\",csrftokenCookie);\r\n        console.log(\"token\",document.cookie);*/\r\n        \r\n    }\r\n    catch(error){\r\n        //console error\r\n        if (error.response && error.response.data) {\r\n            var signMes = error.response.data.state;\r\n            us.setsignMes(signMes);\r\n            console.log(signMes) \r\n        }\r\n        dispatch({ type:USER_SIGNIN_FAIL, payload:error.message});\r\n    }\r\n}\r\n\r\n\r\nconst register = (name,email,password,Vpassword,isAdmin) => async  (dispatch) => {\r\n    dispatch({type: USER_REGISTER_REQUEST, payload: {name, email,password,Vpassword,isAdmin}});\r\n    try{\r\n        const {data} = await Axios.post(\"/api/users/register\",{name,email,password,Vpassword,isAdmin});\r\n        console.log(\"Inside register \",data);\r\n        us.setUserId(data._id);\r\n        var regMes = \"Check mail for verification!!\";\r\n        us.setregMes(regMes);\r\n        var regMes1 = \"\";\r\n        //createCart(data._id);\r\n        //dispatch(createCart(data._id));\r\n        setTimeout(() => {\r\n            us.setregMes(regMes1);\r\n          }, 3000);\r\n        \r\n        dispatch({ type:USER_REGISTER_SUCCESS, payload:data});\r\n      \r\n        Cookie.set('userInfo',JSON.stringify(data));\r\n    }\r\n    catch(error){\r\n        //console error\r\n        if (error.response && error.response.data) {\r\n            var regMes2 = error.response.data.state;\r\n            //setTimeout(function(){ x.className = x.className.replace(\"show\", \"\"); }, 2000);\r\n            //setTimeout(function(){  us.setregMes(regMes); }, 5000);\r\n            us.setregMes(regMes2);\r\n           \r\n            console.log(regMes2) \r\n        }\r\n        dispatch({ type:USER_REGISTER_FAIL, payload:error.message});\r\n    }\r\n}\r\n\r\n/*\r\nconst updateUser = (id,cartId) => async  (dispatch) => {\r\n    dispatch({type: USER_UPDATE_REQUEST, payload: {id,cartId}});\r\n    try{\r\n        const {data} = await Axios.put(`/api/users/${id}`,{cartId});\r\n       \r\n        dispatch({ type:USER_UPDATE_SUCCESS, payload:data});\r\n        Cookie.set('userInfo',JSON.stringify(data));\r\n    }\r\n    catch(error){\r\n        dispatch({ type:USER_UPDATE_FAIL, payload:error.message});\r\n    }\r\n}\r\n*/\r\n\r\nexport{signin,register};"]},"metadata":{},"sourceType":"module"}