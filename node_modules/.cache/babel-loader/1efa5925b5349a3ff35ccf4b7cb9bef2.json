{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rohit\\\\Desktop\\\\intern\\\\Sushmita - Final3\\\\frontend\\\\src\\\\screens\\\\SigninScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { signin } from \"../actions/userActions\";\nimport us from \"../userStore\";\nimport \"./Register.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SigninScreen(props) {\n  _s();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const userSignin = useSelector(state => state.userSignin); //reads a value from the store state this takes the current state as an argument and returns whatever data we want from it.\n\n  const {\n    loading,\n    userInfo,\n    error\n  } = userSignin;\n  const dispatch = useDispatch();\n  /*\r\n    find()\r\n    \r\n  function find(){\r\n    axios.get(\"http://localhost:3000/api/users/\")\r\n      .then(response => {\r\n        for (var i = 0; i < response.data.length; i++) {\r\n          console.log(response.data.[i].email,{email})\r\n      }\r\n        console.log(response)\r\n        console.log(response.data.length)});\r\n  } */\n\n  /* let id = 0\r\n  axios.post(\"http://localhost:3000/api/users/signin\",{email: email , password: password}).then(response => \r\n  {\r\n    console.log(response)\r\n    id = response.data._id\r\n    //console.log(id) \r\n  }) */\n  //let obj = arr.find(o => o.name === 'string 1');\n\n  /* var i=1;\r\n    let obj = arr.find(o => o.name === 'string 1'); */\n\n  /* const options = {\r\n      \"key\":  __DEV__ ? 'rzp_test_8mtVT1x94JsEtr' : 'PRODUCTION_KEY', // Enter the Key ID generated from the Dashboard\r\n      \"amount\": data.amount.toString(), // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise\r\n      \"currency\": data.currency,\r\n      \"name\": \"Silicon14\",\r\n      \"description\": \"Thank you for making your payment\",\r\n      \"image\": \"http://localhost:5000/symbol.png\",\r\n      \"order_id\": data.id, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1\r\n      \"handler\": function (res){\r\n          alert(res.razorpay_payment_id);\r\n          alert(res.razorpay_order_id);\r\n          alert(res.razorpay_signature)  */\n\n  /* console.log(res)\r\n          console.log(id)\r\n        axios.put(`http://localhost:3000/api/orders/${id}`, {id: res.razorpay_order_id})\r\n          .then(response => {\r\n            console.log(response)\r\n          })\r\n          .catch(error => {\r\n            console.log(error)\r\n          }) */\n  //axios.post(`http://localhost:3000/api/orders/:userId/`, {})\n\n  /* },\r\n      \"prefill\": {\r\n         name,\r\n      },\r\n  };\r\n  const paymentObject = new window.Razorpay(options)\r\n  paymentObject.open()\r\n  }  */\n\n  useEffect(() => {\n    //If user signined then redirect to checkout page\n    if (userInfo) {\n      props.history.push(\"/\"); //displayRazorPay();\n      //props.history.push(\"/checkout\");\n      //redirectUser();\n    }\n\n    return () => {};\n  }, [userInfo]); //Only re-run the effect if userInfo changes\n\n  const submitHandler = e => {\n    e.preventDefault(); //Prevent a submit button from submitting a form\n\n    dispatch(signin(email, password)); //dispatch an action to trigger a state change(sign-in).\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"h3-color\",\n            children: [\"Login\", /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa\",\n              children: \"\\uF007\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 20\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            name: \"email\",\n            id: \"email\",\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\",\n            name: \"password\",\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"button primary\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"New to Sillicon14?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/register\",\n            className: \"button secondary text-center\",\n            children: \"Create your Sillicon14 account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"red\"\n            },\n            children: us.getsignMes()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SigninScreen, \"052A733m7CVG71jsYMkKaHG7tgg=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = SigninScreen;\nexport default SigninScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"SigninScreen\");","map":{"version":3,"sources":["C:/Users/rohit/Desktop/intern/Sushmita - Final3/frontend/src/screens/SigninScreen.js"],"names":["React","useEffect","useState","useContext","useDispatch","useSelector","Link","signin","us","SigninScreen","props","email","setEmail","password","setPassword","userSignin","state","loading","userInfo","error","dispatch","history","push","submitHandler","e","preventDefault","target","value","color","getsignMes"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { signin } from \"../actions/userActions\";\r\nimport us from \"../userStore\";\r\nimport \"./Register.css\";\r\n\r\nfunction SigninScreen(props) {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const userSignin = useSelector((state) => state.userSignin); //reads a value from the store state this takes the current state as an argument and returns whatever data we want from it.\r\n  const { loading, userInfo, error } = userSignin;\r\n  const dispatch = useDispatch();\r\n  /*\r\n    find()\r\n    \r\nfunction find(){\r\n    axios.get(\"http://localhost:3000/api/users/\")\r\n      .then(response => {\r\n        for (var i = 0; i < response.data.length; i++) {\r\n          console.log(response.data.[i].email,{email})\r\n      }\r\n        console.log(response)\r\n        console.log(response.data.length)});\r\n  } */\r\n\r\n  /* let id = 0\r\naxios.post(\"http://localhost:3000/api/users/signin\",{email: email , password: password}).then(response => \r\n  {\r\n    console.log(response)\r\n    id = response.data._id\r\n    //console.log(id) \r\n  }) */\r\n\r\n  //let obj = arr.find(o => o.name === 'string 1');\r\n\r\n  /* var i=1;\r\n    let obj = arr.find(o => o.name === 'string 1'); */\r\n\r\n  /* const options = {\r\n      \"key\":  __DEV__ ? 'rzp_test_8mtVT1x94JsEtr' : 'PRODUCTION_KEY', // Enter the Key ID generated from the Dashboard\r\n      \"amount\": data.amount.toString(), // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise\r\n      \"currency\": data.currency,\r\n      \"name\": \"Silicon14\",\r\n      \"description\": \"Thank you for making your payment\",\r\n      \"image\": \"http://localhost:5000/symbol.png\",\r\n      \"order_id\": data.id, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1\r\n      \"handler\": function (res){\r\n          alert(res.razorpay_payment_id);\r\n          alert(res.razorpay_order_id);\r\n          alert(res.razorpay_signature)  */\r\n  /* console.log(res)\r\n          console.log(id)\r\n        axios.put(`http://localhost:3000/api/orders/${id}`, {id: res.razorpay_order_id})\r\n          .then(response => {\r\n            console.log(response)\r\n          })\r\n          .catch(error => {\r\n            console.log(error)\r\n          }) */\r\n  //axios.post(`http://localhost:3000/api/orders/:userId/`, {})\r\n\r\n  /* },\r\n      \"prefill\": {\r\n         name,\r\n      },\r\n  };\r\n  const paymentObject = new window.Razorpay(options)\r\n\t\tpaymentObject.open()\r\n  }  */\r\n\r\n  useEffect(() => {\r\n    //If user signined then redirect to checkout page\r\n    if (userInfo) {\r\n      props.history.push(\"/\");\r\n      //displayRazorPay();\r\n      //props.history.push(\"/checkout\");\r\n      //redirectUser();\r\n    }\r\n    return () => {};\r\n  }, [userInfo]); //Only re-run the effect if userInfo changes\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault(); //Prevent a submit button from submitting a form\r\n    dispatch(signin(email, password)); //dispatch an action to trigger a state change(sign-in).\r\n  };\r\n\r\n  return (\r\n    <div className=\"form\">\r\n      <form onSubmit={submitHandler}>\r\n        <ul className=\"form-container\">\r\n          <li>\r\n            <h3 className=\"h3-color\">\r\n              Login<i className=\"fa\">&#xf007;</i>\r\n            </h3>\r\n          </li>\r\n          <li>\r\n            {loading && <div>Loading...</div>}\r\n            {error && <div>{error}</div>}\r\n          </li>\r\n\r\n          <li>\r\n            <label htmlFor=\"email\">Email</label>\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              id=\"email\"\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            ></input>\r\n          </li>\r\n          <li>\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"password\"\r\n              name=\"password\"\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            ></input>\r\n          </li>\r\n          <li>\r\n            <button type=\"submit\" className=\"button primary\">\r\n              Login\r\n            </button>\r\n          </li>\r\n          <li>New to Sillicon14?</li>\r\n          <li>\r\n            <Link to=\"/register\" className=\"button secondary text-center\">\r\n              Create your Sillicon14 account\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <p style={{ color: \"red\" }}>{us.getsignMes()}</p>\r\n          </li>\r\n        </ul>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\nexport default SigninScreen;\r\n"]},"metadata":{},"sourceType":"module"}